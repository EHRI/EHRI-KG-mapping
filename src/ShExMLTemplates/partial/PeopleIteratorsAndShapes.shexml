ITERATOR people_iterator <jsonpath: $.data.AuthoritativeSet.authorities.items[*]> {
	PUSHED_FIELD id <identifier>
    FIELD name <description.name>
    FIELD lastName <description.lastName>
    FIELD firstName <description.firstName>
    FIELD languageCode <description.languageCode>
    FIELD sourceLink <description.source>
    FIELD datesOfExistence <description.datesOfExistence>
    FIELD biographicalHistory <description.biographicalHistory>
    FIELD typeOfEntity <description.typeOfEntity>
    FIELD legalStatus <description.legalStatus>
    FIELD structure <description.structure>
    FIELD generalContext <description.generalContext>
    FIELD occupation <description.occupation>
  	ITERATOR links <links[*]> {
        ITERATOR targets <targets[?(@.type=='DocumentaryUnit')]> {
            FIELD unit_id <id>
            POPPED_FIELD person_id <id>
        }    
    }
    ITERATOR otherFormsOfName <description.otherFormsOfName> {
        FIELD name<[*]>
        POPPED_FIELD person_id <id>
    }
    ITERATOR parallelFormsOfName <description.parallelFormsOfName> {
        FIELD name<[*]>
        POPPED_FIELD person_id <id>
    }
}

EXPRESSION person <people.people_iterator>
EXPRESSION other_name_id <people.people_iterator.parallelFormsOfName.person_id + "-" + people.people_iterator.otherFormsOfName.name>
EXPRESSION parallel_name_id <people.people_iterator.parallelFormsOfName.person_id + "-" + people.people_iterator.parallelFormsOfName.name>

ehri:Person ehri_pers:[person.id] {
    a ehri:Person ;
    rico:name [person.name] @[person.languageCode] ;
    rico:history [person.biographicalHistory] @[person.languageCode] ;
    rico:hasOrHadAgentName @ehri:AgentParallelName ;
    rico:hasOrHadAgentName @ehri:AgentOtherName ;
    rdfs:seeAlso [transformers.removeSquareBrackets(person.sourceLink) IF validators.isURL(person.sourceLink)] ;
    ehri:sources [transformers.removeSquareBrackets(person.sourceLink) IF validators.nonURL(person.sourceLink)] ; 
   	#rico:date [person.dates.date IF validators.nonDateInterval(person.dates.date)] ; # this field is not mapped in the API, pending a fix to a possible bug in ShExML and it could be divided into beginning and ending dates.
    rico:date [person.datesOfExistence IF validators.nonDateInterval(person.datesOfExistence)] ; # Pending a fix to a possible bug in ShExML
	rico:hasBirthDate @ehri:PersonBeginningDate ;
	rico:hasDeathDate @ehri:PersonEndDate ;
    # rico:agentHasOrHadLocation @ehri:AuthorityPlace ; # This is not present in the API and it will be difficult to determine the correct prefix among cities, countries and regions.
    rico:hasOrHadLegalStatus @ehri:AuthorityLegalStatus ;
    rico:performsOrPerformed @ehri:AuthorityActivity ;
    # rico:authorizedBy @ehri:AuthorityMandate ; # This is not present in the API
    ehri:structureOrGenealogy [person.structure] ; # This can be divided in structure of cb and genealogy of family if needed
    rico:generalDescription [person.generalContext] ;
}

ehri:Link ehri_units:[person.links.targets.unit_id] {
    rico:hasOrHadSubject ehri_pers:[person.links.targets.person_id] ;
}

ehri:AgentOtherName ehri_other_name:[other_name_id] { # better id is needed and a way to separate the different names has to be found
	a rico:AgentName ;
	rico:name [person.otherFormsOfName.name] ;
	rico:isOrWasAgentNameOf ehri_pers:[person.otherFormsOfName.person_id] ;
}

ehri:AgentParallelName ehri_parallel_name:[parallel_name_id] { # better id is needed and a way to separate the different names has to be found
	a rico:AgentName ;
	rico:name [person.parallelFormsOfName.name] ;
	rico:isOrWasAgentNameOf ehri_pers:[person.parallelFormsOfName.person_id] ;
}

ehri:PersonBeginningDate ehri_date:[transformers.toBeginningDateID(person.id) IF validators.validateDateInterval(person.datesOfExistence)] { # better id is needed and for now it only takes into account that one address can exist. # Pending to fix a possible error in ShExML
	a rico:Date ;
	rico:normalizedDateValue [transformers.leftPartDate(person.datesOfExistence)] ;
	rico:isBeginningDateOf ehri_pers:[person.id] ;
}

ehri:PersonEndDate ehri_date:[transformers.toEndDateID(person.id) IF validators.validateDateInterval(person.datesOfExistence)] { # better id is needed and for now it only takes into account that one address can exist # Pending to fix a possible error in ShExML
	a rico:Date ;
	rico:normalizedDateValue [transformers.rightPartDate(person.datesOfExistence)] ;
	rico:isBeginningDateOf ehri_units:[person.id] ;
}

ehri:AuthorityLegalStatus ehri_legal_status:[person.id IF validators.nonEmpty(person.legalStatus)] { # Pending possible fix in ShExML
    a rico:LegalStatus ;
    rico:generalDescription [person.legalStatus] @[person.languageCode] ;
    rico:isOrWasLegalStatusOf ehri_pers:[person.id] ;
}

ehri:AuthorityActivity ehri_activity:[person.id IF validators.nonEmpty(person.occupation)] { # Pending possible fix in ShExML
    a rico:Activity ;
    rico:generalDescription [person.occupation] ;
    rico:isOrWasPerformedBy ehri_pers:[person.id] ;
}

# ehri:AuthorityMandate ehri_mandate:[person.id] { # Possible collision with institutions and people mandates ids.
#     a rico:Mandate ;
#     rico:generalDescription [person.mandate] ;
#     rico:authorizes ehri_pers:[person.id] ;
# } 